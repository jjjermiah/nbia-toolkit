name: CI-CD

# only run on pushes to main or pull requests
on:
  push:
    # push to any branch *
    branches: [ main ]
  pull_request:
    branches: [ main , development ]

jobs:
  Unit-Tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15 # Consider increasing timeout

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-14]
        python-version: ["3.12", "3.11", "3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install

      - name: Test with pytest
        run: |
          # Github action runners now have 4 cores
          poetry run pytest -s -v -n 4 --cov --cov-report xml:coverage-report/coverage.xml

      - name: Upload coverage report artifact to be used by Codecov
        # only upload if matrix.os is ubuntu-latest and matrix.python-version is 3.12
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage-report

  Code-Coverage:
    needs: Unit-Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download coverage.xml artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage-report
          path: coverage-report

      - name: Use Codecov to track coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage-report/coverage.xml
          fail_ci_if_error: true
          verbose: true
          name: codecov-umbrella

  Build-Documentation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.4

      - name: Install poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install

      - name: Build documentation
        run: |
          pip install -r docs/requirements.txt
          pip install .
          make html --directory=docs

  Continuous-Deployment:
    permissions:
        contents: write
        packages: write
        issues: write
        pull-requests: write

    needs: [Unit-Tests]

    # if pulling to main, deploy to PyPI
    if: github.ref == 'refs/heads/main'

    # Set up operating system
    runs-on: ubuntu-latest

    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}

    # Define job steps
    steps:
    - name: Set up Python 3.12
      uses: actions/setup-python@v2
      with:
        python-version: 3.12

    - name: Check-out repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Python Semantic Release
      id: release
      uses: python-semantic-release/python-semantic-release@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

  Publish-To-PyPi:
    needs: Continuous-Deployment
    if: needs.Continuous-Deployment.outputs.released == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code with tag ${{ needs.Continuous-Deployment.outputs.tag }}
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.Continuous-Deployment.outputs.tag }}

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install Package-Building Tool
        run:
          python3 -m pip install build twine

      - name: Build package
        run:
          python3 -m build --sdist --wheel --outdir dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  Build-Docker-Images:
    needs: Continuous-Deployment
    if: needs.Continuous-Deployment.outputs.released == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.Continuous-Deployment.outputs.tag }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/nbiatoolkit:${{ needs.Continuous-Deployment.outputs.tag }}
            ghcr.io/${{ github.repository }}/nbiatoolkit:${{ needs.Continuous-Deployment.outputs.tag }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/nbiatoolkit:${{ needs.Continuous-Deployment.outputs.tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/nbiatoolkit:latest
            ghcr.io/${{ github.repository }}/nbiatoolkit:${{ needs.Continuous-Deployment.outputs.tag }}
            ghcr.io/${{ github.repository }}/nbiatoolkit:latest
          labels: ${{ steps.meta.outputs.labels }}

  Test-PyPi-Install:
    needs: Publish-To-PyPi
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-14]
        python-version: ["3.12", "3.11", "3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install using PyPi
        run: |
          pip install  nbiatoolkit;
          NBIAToolkit

  Test-Docker-Image:
    needs: Build-Docker-Images
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        docker_tag: ["latest", "${{ needs.Continuous-Deployment.outputs.tag }}"]

    steps:
      - name: Setup Docker to pull images
        uses: docker/setup-buildx-action@v3

      - name: Install using Docker
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/nbiatoolkit:${{ matrix.docker_tag }};
          docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/nbiatoolkit:${{ matrix.docker_tag }} NBIAToolkit
